{"version":3,"sources":["firebase.js","redux/module/musics.js","MusicCard.js","Btn.js","Home.js","CustomInput.js","Form.js","img/title.svg","Header.js","img/dot-grid.png","GlobalStyles.js","theme.js","App.js","redux/configStore.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","musics_db","firestore","collection","initialState","music_list","lastValue","loadMoreMusicsFB","value","dispatch","musics","beforeNum","parseInt","orderBy","startAfter","limit","get","then","docs","forEach","doc","exists","id","data","res","type","loadMoreMusics","state","action","added_musics","music","word_list","new_music_list","map","completed","modified_musics","left_musics","filter","MusicCard","forwardRef","ref","music_obj","singer","url","comment","useDispatch","toggleCheck","update","updateCompleteFB","deleteCard","prompt","delete","deleteMusic","deleteMusicFB","alert","Card","BtnBox","onClick","AfterCheck","BeforeCheck","to","pathname","Edit","Delete","MusicSet","Music","Singer","Url","Comment","styled","article","theme","colors","device","css","mainColor","tablet","desktop","CardFontColor","black","white","div","h4","fontSize","sm","span","p","fontSizes","md","Icons","props","xl","TiTickOutline","TiTick","TiEdit","TiTimes","Btn","RoundBtn","RectangleBtn","Cards","Plus","TiPlus","AddBtn","Link","Home","useSelector","useState","target","setTarget","useEffect","io","IntersectionObserver","observer","a","entries","isIntersecting","unobserve","threshold","observe","disconnect","idx","lastItem","length","CustomInput","title","idText","currentValue","setValue","Container","Label","htmlFor","Input","onChange","e","label","input","mint","Subtitle","h2","Formpage","form","SaveBtn","button","Form","location","musicRef","useRef","singerRef","urlRef","commentRef","getFormData","current","trim","onsubmit","preventDefault","modifyMusic","history","push","new_music_obj","date","Date","now","complated","new_music","add","addMusic","HeaderContainer","yellowGreen","Title","h1","lg","TitleImg","img","Header","src","Img","alt","GlobalStyles","createGlobalStyle","reset","Background","blue","xs","App","loadMusics","className","path","exact","component","middlewares","createBrowserHistory","thunk","enhancer","applyMiddleware","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9dfeb1ee.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCjN0NTOTzHFIc29S_h-gaIwo-TzM0UgJs\",\r\n    authDomain: \"sparta-react-a8c23.firebaseapp.com\",\r\n    projectId: \"sparta-react-a8c23\",\r\n    storageBucket: \"sparta-react-a8c23.appspot.com\",\r\n    messagingSenderId: \"1089668661209\",\r\n    appId: \"1:1089668661209:web:1e0adaf696571b40bca3c8\",\r\n    measurementId: \"G-5LEHQSWJ4C\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst firestore = firebase.firestore();\r\n\r\nexport { firestore };","// musics.js 는 ducks 패턴을 사용한 musics 모듈\r\n// list 불러오기, 등록, 수정, 삭제\r\n\r\nimport { firestore } from \"../../firebase\";\r\n\r\nconst musics_db = firestore.collection(\"musics\");\r\n\r\n// 액션\r\nconst LOAD = \"musics/LOAD\";\r\nconst LOAD_MORE = \"musics/LOAD_MORE\";\r\nconst ADD = \"music/ADD\"\r\nconst MODIFY = \"music/MODIFY\";\r\nconst COMPLETE = \"music/COMPLETE\";\r\nconst DELETE = \"music/DELETE\";\r\n\r\n// 초기값\r\nconst initialState = {\r\n    music_list: [],\r\n    lastValue: 0,\r\n};\r\n\r\n// 액션함수\r\nexport const loadMusics = (musics, lastValue) => ({\r\n    type: LOAD,\r\n    musics,\r\n    lastValue,\r\n});\r\n\r\nexport const loadMoreMusics = (musics, lastValue) => ({\r\n    type: LOAD_MORE,\r\n    musics,\r\n    lastValue,\r\n})\r\n\r\nexport const addMusic = (music) => ({ type: ADD, music });\r\nexport const updateComplete = (id) => ({ type: COMPLETE, id });\r\nexport const modifyMusic = (music) => ({ type: MODIFY, music });\r\nexport const deleteMusic = (id) => ({ type: DELETE, id });\r\n\r\n// thunk\r\n\r\n// firebase에서 단어들을 처음 불러오는 함수 (무한 스크롤 적용을 위해)\r\nexport const loadMusicsFB = () => {\r\n    return function (dispatch) {\r\n        let musics = [];\r\n        let lastValue;\r\n        musics_db\r\n          .orderBy(\"date\", \"desc\") // date라는 key를 기준으로 내림차순 정렬\r\n          .limit(10) // 10개만\r\n          .get()\r\n          .then((docs) => {\r\n              docs.forEach((doc) => {\r\n                  musics = [...musics, { id: doc.id, ...doc.data() }];\r\n                  lastValue = doc.data().date; // 마지막으로 가져온 date값 (다음 값을 가져오기 위해 저장)\r\n              });\r\n          })\r\n          .then((res) => dispatch(loadMusics(musics, lastValue)));\r\n    };\r\n};\r\n\r\n// firebase에서 다음 단어들을 불러오는 함수\r\nexport const loadMoreMusicsFB = (value) => {\r\n    return function (dispatch) {\r\n        let musics = [];\r\n        let beforeNum = parseInt(value); // 가장 마지막으로 가져온 date값을 의미\r\n        let lastValue;\r\n        musics_db\r\n          .orderBy(\"date\", \"desc\")\r\n          .startAfter(beforeNum) // 가장 마지막으로 가져온 값 다음부터 시작\r\n          .limit(10)\r\n          .get()\r\n          .then((docs) => {\r\n            docs.forEach((doc) => {\r\n                if (docs.exists) {\r\n                    musics = [...musics, { id: doc.id, ...doc.data()  }];\r\n                    lastValue = doc.data().data;\r\n                }\r\n            });  \r\n          })\r\n          .then((res) => dispatch(loadMoreMusics(musics, lastValue)));\r\n    };\r\n};\r\n\r\n// 새로운 music 등록 함수\r\nexport const addMusicFB = (music) => {\r\n    return function (dispatch) {\r\n        let new_music;\r\n        musics_db\r\n          .add(music)\r\n          .then((doc) => {\r\n              new_music = { ...music, id: doc.id};\r\n          })\r\n          .then((res) => dispatch(addMusic(new_music)));\r\n    };\r\n};\r\n\r\n// 토글 함수\r\nexport const updateCompleteFB = (music) => {\r\n    return function (dispatch) {\r\n        musics_db.doc(music.id).update({ completed: !music.completed });\r\n        dispatch(updateComplete(music.id));\r\n    };\r\n};\r\n\r\n// 내용 변경 함수\r\nexport const modifyMusicFB =(music, id) => {\r\n    return function (dispatch) {\r\n        musics_db.doc(id).update(music);\r\n        const new_music = { ...music, id };\r\n        dispatch(modifyMusic(new_music));\r\n    };\r\n};\r\n\r\n// 내용 삭제 함수\r\nexport const deleteMusicFB = (id) => {\r\n    return function (dispatch) {\r\n        musics_db.doc(id).delete();\r\n        dispatch(deleteMusic(id));\r\n    };\r\n};\r\n\r\n// reducer\r\nfunction musics(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"musics/LOAD\":\r\n            return {\r\n                ...state,\r\n                music_list: action.musics,\r\n                lastValue: action.lastValue,\r\n            };\r\n        case \"musics/LOAD_MORE\":\r\n            return {\r\n                ...state,\r\n                music_list: [...state.music_list, ...action.musics],\r\n                lastValue: action.lastValue,\r\n            };\r\n        case \"music/ADD\":\r\n            let added_musics = [...state.music_list, action.music];\r\n            return {\r\n                ...state,\r\n                word_list: added_musics,\r\n            };\r\n        case \"music/COMPLETE\":\r\n            const new_music_list = state.music_list.map((music) => \r\n                music.id === action.id ? { ...music, completed: !music.completed } : music\r\n            );\r\n            return {\r\n                ...state,\r\n                music_list: new_music_list,\r\n            };\r\n        case \"music/MODIFY\":\r\n            let modified_musics = state.music_list.map((music) => \r\n                music.id === action.music.id ? { ...music, ...action.music} : music\r\n            );\r\n            return {\r\n                ...state,\r\n                music_list: modified_musics,\r\n            };\r\n        case \"music/DELETE\":\r\n            let left_musics = state.music_list.filter((music) => music.id !== action.id);\r\n            return {\r\n                ...state,\r\n                music_list: left_musics,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default musics;","// MusicCard.js 는 단어 카드 하나를 의미하는 컴포넌트\r\n\r\nimport React, { forwardRef } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// react-icons 라이브러리 사용\r\nimport {TiTickOutline, TiTick, TiEdit, TiTimes } from \"react-icons/ti\";\r\n\r\n// redux\r\nimport { deleteMusicFB, updateCompleteFB } from \"./redux/module/musics\";\r\n\r\n// 상위 컴포넌트에서 하위 컴포넌트의 리액트 요소를 참조(ref)하기 위해 fowardRef 사용\r\nconst MusicCard = forwardRef(({ music_obj }, ref) => {\r\n    const { music, singer, url, comment, completed, id} =\r\n        music_obj;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // 토글 함수\r\n    const toggleCheck = (music) => {\r\n        dispatch(updateCompleteFB(music));\r\n    };\r\n\r\n    // Card 삭제 함수\r\n    const deleteCard = (id) => {\r\n        const password = prompt(\"비밀번호를 입력해주세요\");\r\n        // 삭제를 막기 위해 임시로 막아두었습니다.\r\n        if (password !== id) {\r\n            alert(\"비밀번호가 틀려 삭제할 수 없습니다.\");\r\n            return;\r\n        }\r\n        dispatch(deleteMusicFB(id));\r\n    };\r\n\r\n    return (\r\n        <Card completed={`${completed}`} ref={ref}>\r\n            <BtnBox>\r\n                <button onClick={() => toggleCheck(music_obj)}>\r\n                    {completed ? <AfterCheck /> : <BeforeCheck />}\r\n                </button>\r\n                <Link\r\n                    to={{\r\n                        pathname: `/music/${id}/edit`,\r\n                        state: music_obj,\r\n                    }}\r\n                >\r\n                    <Edit completed={`${completed}`} />\r\n                </Link>\r\n                <button onClick={() => deleteCard(id)}>\r\n                    <Delete completed={`${completed}`} />\r\n                </button>\r\n            </BtnBox>\r\n            <MusicSet completed={`${completed}`}>\r\n                <Music>{music}</Music>\r\n                <Singer>{singer}</Singer>\r\n            </MusicSet>\r\n            <Url completed={`${completed}`}>{url}</Url>\r\n            <Comment completed={`${completed}`}>{comment}</Comment>\r\n        </Card>\r\n    );\r\n});\r\n\r\nconst Card = styled.article`\r\n    ${({ completed, theme }) => {\r\n        const { colors, device } = theme;\r\n        return css`\r\n            position: relative;\r\n            width: 100%;\r\n            padding: 20px;\r\n            border: 2px solid ${colors.mainColor};\r\n            border-radius: 10px;\r\n            background-color : ${completed === \"false\"\r\n                ? \"rgba(255, 255, 255, 0.4)\"\r\n                : colors.mainColor};\r\n            transition: box-shadow 300ms ease-in-out;\r\n\r\n            ${device.tablet} {\r\n                width: calc((100% - 20px) / 2);\r\n            }\r\n\r\n            ${device.desktop} {\r\n                width: calc((100% - (20px * 2)) / 3);\r\n            }\r\n\r\n            &:hover {\r\n                box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;\r\n            }\r\n        `;\r\n    }}\r\n`;\r\n\r\n// styled-component의 css를 사용하여 스타일 요소를 재사용\r\nconst CardFontColor = css`\r\n    color: ${({ completed, theme }) =>\r\n        completed === \"false\" ? theme.colors.black : theme.colors.white}; \r\n`;\r\n\r\nconst MusicSet = styled.div`\r\n    // 위에서 정의한 CardFontColor 재사용\r\n    ${CardFontColor}\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap: 10px;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst Music = styled.h4`\r\n    margin-right: 5px;\r\n    font-size: ${({ theme }) => theme.fontSize.sm};\r\n`;\r\n\r\nconst Singer = styled.span`\r\n    font-size: ${({ theme }) => theme.fontSize.sm};\r\n`\r\n\r\nconst Url = styled.p`\r\n  ${CardFontColor};\r\n  margin-bottom: 10px;\r\n  font-size: ${({ theme }) => theme.fontSizes.md};\r\n`;\r\n\r\nconst Comment = styled.p`\r\n  ${CardFontColor};\r\n  margin-bottom: 10px;\r\n  font-size: ${({ theme }) => theme.fontSizes.md};\r\n`;\r\n\r\nconst BtnBox = styled.div`\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & > button {\r\n    padding: 3px;\r\n  }\r\n`;\r\n\r\nconst Icons = css`\r\n  color: ${(props) =>\r\n    props.completed === \"false\"\r\n      ? props.theme.colors.mainColor\r\n      : props.theme.colors.white};\r\n  font-size: ${({ theme }) => theme.fontSizes.xl};\r\n`;\r\n\r\nconst BeforeCheck = styled(TiTickOutline)`\r\n  color: ${({ theme }) => theme.colors.mainColor};\r\n  font-size: ${({ theme }) => theme.fontSizes.xl};\r\n`;\r\nconst AfterCheck = styled(TiTick)`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  font-size: ${({ theme }) => theme.fontSizes.xl};\r\n`;\r\n\r\nconst Edit = styled(TiEdit)`\r\n  ${Icons};\r\n`;\r\n\r\nconst Delete = styled(TiTimes)`\r\n  ${Icons};\r\n`;\r\n\r\nexport default MusicCard;\r\n","//Btn.js : 버튼 스타일을 RountBtn과 RectangleBt 으로 나누어 지정한 뒤 사용할 컴포넌트에서 import 해서 사용\r\n\r\nimport { css } from \"styled-components\";\r\n\r\n// Rount, Rectangle에서 공통적으로 사용할 스타일\r\nconst Btn = css `\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: ${({theme}) => theme.colors.white};\r\n    background-color: ${({theme}) => theme.colors.mainColor};\r\n`;\r\n\r\nexport const RoundBtn = css`\r\n    ${Btn};\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n`;\r\n\r\nexport const RectangleBtn = css`\r\n    ${Btn};\r\n    width: 200px;\r\n    height: 40px;\r\n    font-size: ${({ theme }) => theme.fontSizes.md};\r\n`;","// Home.js 는 메인페이지\r\n// Intersection Observer를 이용한 무한 스크롤\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TiPlus } from \"react-icons/ti\";\r\n\r\n// component, element\r\nimport MusicCard from \"./MusicCard\";\r\nimport { RoundBtn } from \"./Btn\";\r\n\r\n// redux\r\nimport { loadMoreMusicsFB } from \"./redux/module/musics\";\r\n\r\nconst Home = () => {\r\n    const musics = useSelector((state) => state.musics.music_list);\r\n    const lastValue = useSelector((state) => state.musics.lastValue);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // 무한 스크롤 구현\r\n    const [target, setTarget] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //새롭게 생성할 observer에 전달될 설정값\r\n        let options = {\r\n            threshold: \"1\",\r\n        };\r\n\r\n        //새롭게 생성할 observer가 수행할 행동 정의\r\n        let handleIntersection = async ([entries], observer) => {\r\n            if (!entries.isIntersecting) {\r\n                return;\r\n            } else {\r\n                await dispatch(loadMoreMusicsFB(lastValue));\r\n                observer.unobserve(entries.target);\r\n            }\r\n        };\r\n\r\n        //새로운 observer 생성\r\n        const io = new IntersectionObserver(handleIntersection, options);\r\n        if (target) io.observe(target);\r\n\r\n        return () => io && io.disconnect();\r\n    }, [dispatch, lastValue, target]);\r\n\r\n    return (\r\n        <div>\r\n            <Cards>\r\n                {musics.map((music, idx) => {\r\n                    //새로 불러온 데이터들 중 가장 마지막 값을 찾아 target으로 설정함\r\n                    const lastItem = idx === musics.length - 1;\r\n                    return (\r\n                        <MusicCard \r\n                            key={music.id}\r\n                            music_obj={music}\r\n                            ref={lastItem ? setTarget : null}\r\n                        />\r\n                    );\r\n                })}\r\n            </Cards>\r\n            <AddBtn to=\"/music/add\">\r\n                <Plus />\r\n            </AddBtn>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Cards = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  width: 100%;\r\n  padding: 50px 0;\r\n`;\r\n\r\nconst Plus = styled(TiPlus)`\r\n  font-size: 28px;\r\n`;\r\n\r\nconst AddBtn = styled(Link)`\r\n  ${RoundBtn};\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\r\n    rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\r\n\r\n  ${({ theme }) => theme.device.tablet} {\r\n    bottom: 20px;\r\n    right: 20px;\r\n  }\r\n\r\n  ${Plus} {\r\n    transition: transform 300ms ease-in-out;\r\n  }\r\n\r\n  &:hover {\r\n    ${Plus} {\r\n      transform: rotate(90deg);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Home;","// CustomInput.js  Form에서 사용하기 위한 Input 컴포넌트\r\n\r\nimport React, { forwardRef,useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 상위 컴포넌트에서 하위 컴포넌트의 리액트 요소를 참조(ref)하기 위해 forwardRef 사용\r\nconst CustomInput = forwardRef((props, ref) => {\r\n    const { title, idText, currentValue } = props;\r\n\r\n    //수정인 경우에는 기존 값을, 새로 등록하는 경우에는 빈 문자열을 value로 함\r\n    const [value, setValue] = useState(currentValue ? currentValue : \"\");\r\n\r\n    //input의 값이 변할 때마다 value값 변경\r\n    const inputChange = (e) => setValue(e.target.value);\r\n\r\n    return (\r\n        <Container>\r\n            <Label htmlFor={idText}>{title}</Label>\r\n            <Input\r\n                type=\"text\"\r\n                id={idText}\r\n                ref={ref}\r\n                onChange={inputChange}\r\n                value={value}\r\n            />\r\n        </Container>\r\n    );\r\n});\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: ${({ theme }) => theme.fontSizes.sm};\r\n  font-weight: 600;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  height: 28px;\r\n  padding: 5px 0;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.mint};\r\n  font-size: ${({ theme }) => theme.fontSizes.md};\r\n  font-weight: 500;\r\n  transition: border-color 300ms ease-in-out;\r\n\r\n  &:focus {\r\n    border-color: ${({ theme }) => theme.colors.mainColor};\r\n  }\r\n`;\r\n\r\nexport default CustomInput;","// Form.js 는 리스트를 새로 등록하는 경우 사용되는 Form 컴포넌트입니다.\r\n\r\nimport React, {useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// component, element\r\nimport CustomInput from \"./CustomInput\";\r\nimport {RectangleBtn} from \"./Btn\";\r\n\r\n// redux\r\nimport { addMusicFB, modifyMusicFB } from \"./redux/module/musics\";\r\n\r\n\r\nconst Form = (props) => {\r\n    const data = props.location.state;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const musicRef = useRef(null);\r\n    const singerRef = useRef(null);\r\n    const urlRef = useRef(null);\r\n    const commentRef = useRef(null);\r\n\r\n    // getFormData 함수\r\n    // -입력된 모든 값을 가져옴\r\n    // - 유효성 검사\r\n    // - 모든 값들이 들어있는 하나의 객체를 변환\r\n\r\n    const getFormData = () => {\r\n        const music = musicRef.current.value.trim();\r\n        const singer = singerRef.current.value.trim();\r\n        const url = urlRef.current.value.trim();\r\n        const comment = commentRef.current.value.trim();\r\n\r\n        // 유효성 검사\r\n        if (!music || !singer || !url || !comment) {\r\n            alert(\"아직 입력하지 않은 항목이 있습니다!\");\r\n            return false;\r\n        }\r\n        \r\n        // flase 일 경우 반환 할 object\r\n        const music_obj ={\r\n            music,\r\n            singer,\r\n            url,\r\n            comment,\r\n        };\r\n\r\n        return music_obj;\r\n    };\r\n\r\n    // musicForm을 등록하는 함수\r\n    const submitmusic  = (e) => {\r\n        e.preventDefault();\r\n\r\n        const music_obj = getFormData();\r\n        if (!music_obj) return;\r\n\r\n        // firebase에서 시간순으로 불러올 수 있도록 date 값을 추가\r\n        const new_music_obj = { ...music_obj, date: Date.now(), complated: false};\r\n\r\n        dispatch(addMusicFB(new_music_obj, data.id));\r\n        props.history.push(\"/\");\r\n    };\r\n\r\n    // 단어를 수정하는 함수\r\n    const updateMusic = (e) => {\r\n        e.preventDefault();\r\n\r\n        const music_obj = getFormData();\r\n        if (!music_obj) return;\r\n\r\n        dispatch(modifyMusicFB(music_obj, data.id));\r\n        props.history.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Subtitle>{data ? \"music 수정\" : \"music 추가하기\"}</Subtitle>\r\n            <Formpage onsubmit={data ? updateMusic : submitmusic}>\r\n                <CustomInput \r\n                    title=\"music\"\r\n                    idText=\"input-music\"\r\n                    ref={musicRef}\r\n                    currentValue={data && data.music}\r\n                />\r\n                <CustomInput \r\n                    title=\"singer\"\r\n                    idText=\"input-singer\"\r\n                    ref={singerRef}\r\n                    currentValue={data && data.singer}\r\n                />\r\n                <CustomInput \r\n                    title=\"url\"\r\n                    idText=\"input-url\"\r\n                    ref={urlRef}\r\n                    currentValue={data && data.url}\r\n                />\r\n                <CustomInput \r\n                    title=\"comment\"\r\n                    idText=\"input-comment\"\r\n                    ref={commentRef}\r\n                    currentValue={data && data.comment}\r\n                />\r\n                <SaveBtn type=\"submit\">{data ? \"수정\" : \"저장하기\"}</SaveBtn>\r\n            </Formpage>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n\r\n  ${({ theme }) => theme.device.tablet} {\r\n    margin: 80px auto;\r\n  }\r\n`;\r\n\r\nconst Subtitle = styled.h2`\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  color: ${({ theme }) => theme.colors.mainColor};\r\n`;\r\n\r\nconst Formpage = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst SaveBtn = styled.button`\r\n  ${RectangleBtn};\r\n  align-self: center;\r\n`;\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/title.be77da3c.svg\";","// Header.js\r\n\r\nimport React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Img from \"./img/title.svg\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <HeaderContainer>\r\n        <Link to=\"/\">\r\n            <Title>\r\n            <TitleImg src={Img} alt=\"나만의 플레이리스트\" />\r\n            </Title>\r\n        </Link>\r\n        </HeaderContainer>\r\n    );\r\n};\r\n\r\nconst HeaderContainer = styled.div`\r\n    ${({ theme }) => {\r\n        const { colors, device } = theme;\r\n        return css`\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            z-index: 10;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            width: 100%;\r\n            height: 50px;\r\n            background-color: ${colors.white};\r\n            border-bottom: 2px solid ${colors.yellowGreen};\r\n\r\n            ${device.tablet} {\r\n                height: 60px;\r\n            }\r\n        `;\r\n    }}\r\n`;\r\n\r\nconst Title = styled.h1`\r\n${({ theme }) => {\r\n    const { colors, device, fontSizes } = theme;\r\n    return css`\r\n    color: ${colors.mainColor};\r\n    font-size: ${fontSizes.lg};\r\n    font-weight: 600;\r\n\r\n    ${device.tablet} {\r\n        font-size: ${fontSizes.xl};\r\n    }\r\n    `;\r\n}}\r\n`;\r\n\r\nconst TitleImg = styled.img`\r\nmargin-top: 2px;\r\nheight: 28px;\r\n\r\n${({ theme }) => theme.device.tablet} {\r\n    height: 30px;\r\n}\r\n`;\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/dot-grid.c18d167e.png\";","// 글로벌하게 적용되는 스타일을 모아서 작성\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { reset } from \"styled-reset\";\r\nimport Background from \"./img/dot-grid.png\"; // 이미지는 public 폴더에\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    //reset.css 를 리액트에서 쉽게 사용\r\n    ${reset}\r\n\r\n    //font 가져오기\r\n    @font-face {\r\n        font-family: 'Stylish', sans-serif;\r\n        src: url('https://fonts.googleapis.com/css2?family=Stylish&display=swap');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        min-height: 100vh - 60px;\r\n        background-image: url(${Background});\r\n        font-family: 'Stylish', sans-serif;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        color: black;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n\r\n    input,\r\n    textarea,\r\n    button {\r\n        border: none;\r\n        background-clolr: transparent;\r\n        font-family: 'Stylish', sans-serif;\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;","\r\n //theme.js : styled-components에서 사용할 theme을 정의\r\n \r\n\r\n// media query를 좀 더 간편하게 쓰기 위해 문자열을 theme으로 등록 (반응형 웹)\r\nconst device = {\r\n    tablet: `@media screen and (min-width: 768px)`,\r\n    desktop: `@media screen and (min-width: 1024px)`,\r\n  };\r\n  \r\n  // 주로 사용하는 색상을 theme으로 지정\r\n  const colors = {\r\n    mainColor: \"#87CEEB\", // skyblue\r\n    yellowGreen: \"#87CEFA\",\r\n    mint: \"#DBE8D8\",\r\n    blue: \"#0984e3\",\r\n    white: \"#FFFFFF\",\r\n    black: \"000000\",\r\n  };\r\n  \r\n  const fontSizes = {\r\n    xs: \"12px\",\r\n    sm: \"14px\",\r\n    md: \"16px\",\r\n    lg: \"20px\",\r\n    xl: \"24px\",\r\n  };\r\n  \r\n  const theme = {\r\n    device,\r\n    colors,\r\n    fontSizes,\r\n  };\r\n  \r\n  export default theme;","import React, {useEffect} from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// component\nimport Home from \"./Home\";\nimport Form from \"./Form\";\nimport Header from \"./Header\";\n\n//style\nimport GlobalStyles from \"./GlobalStyles\";\nimport theme from \"./theme\";\n\n//redux\nimport { loadMusicsFB } from \"./redux/module/musics\";\n\nfunction App() {\n  const dispatch =useDispatch();\n\n  // App.js가 새로 렌더될 때마다 loadMusicsFB 함수를 dispatch 합니다.\n  useEffect(() => {\n    dispatch(loadMusicsFB());\n  }, [dispatch]);\n\n  return (\n    // ThemeProvider를 활용하면 theme을 사용할 수 있습니다\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <GlobalStyles />\n        <Header />\n        <Container>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/music/add\" component={Form} />\n            <Route path=\"/music/:id/edit\" component={Form} />\n          </Switch>\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nconst Container = styled.div`\n  margin-top: 40px;\n  padding: 0 30px;\n\n  // theme.js에서 지정한 문자열을 이용 - @media screen and (min-width: 768px) {} 와 같은 뜻이 됩니다.\n  // 짧게 쓰고 유지보수성을 높이기 위해 theme으로 등록했습니다.\n  ${({ theme }) => theme.device.tablet} {\n    margin-top: 60px;\n    padding: 0 50px;\n  }\n\n  ${({ theme }) => theme.device.desktop} {\n    max-width: 1400px;\n    margin: 60px auto 0 auto;\n  }\n`;\n\nexport default App;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport thunk from \"redux-thunk\";\r\nimport musics from \"./module/musics\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst enhancer = applyMiddleware(...middlewares);\r\nconst rootReducer = combineReducers({ musics });\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n// components\nimport App from \"./App\";\n\n// api\nimport store from \"./redux/configStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}